
ELRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  000006a4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000df8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000921  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000240  00000000  00000000  00001799  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000454  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031f  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000302  00000000  00000000  00002303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_16>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_31>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 e1       	ldi	r30, 0x10	; 16
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ae 30       	cpi	r26, 0x0E	; 14
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 c6 02 	call	0x58c	; 0x58c <main>
  e2:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <set_fuses>:
//  Funktionen
//*************************************************************************************************

void set_fuses(void)
{
	MCUCR |= (1<<JTD);
  ea:	85 b7       	in	r24, 0x35	; 53
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<JTD);
  f0:	85 b7       	in	r24, 0x35	; 53
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	85 bf       	out	0x35, r24	; 53
	
	CLKPR = 0b10000000;
  f6:	e1 e6       	ldi	r30, 0x61	; 97
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	80 83       	st	Z, r24
	CLKPR = 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 83       	st	Z, r24
}
 102:	08 95       	ret

00000104 <pwm_timer_init>:

void pwm_timer_init(void)
{
	// Timer 4
	//MOTOR RECHTS
	TCCR4A |= (1<<COM4B1) | (1<<PWM4B);		// OC4B aktiviert bei Compare Match, PWM4B aktiviert
 104:	e0 ec       	ldi	r30, 0xC0	; 192
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 62       	ori	r24, 0x21	; 33
 10c:	80 83       	st	Z, r24
	//MOTOR LINKS
	TCCR4C |= (1<<COM4D1) | (1<<PWM4D);		// OC4D aktiviert bei Compare Match, PWM4D aktiviert 
 10e:	e2 ec       	ldi	r30, 0xC2	; 194
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	89 60       	ori	r24, 0x09	; 9
 116:	80 83       	st	Z, r24
}
 118:	08 95       	ret

0000011a <pwm_timer_start>:

void pwm_timer_start(void)
{
	// Timer 4
	//MOTOR RECHTS
	TCCR4A |= (1<<COM4B1) | (1<<PWM4B);		// OC4B aktiviert bei Compare Match, PWM4B aktiviert
 11a:	e0 ec       	ldi	r30, 0xC0	; 192
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 62       	ori	r24, 0x21	; 33
 122:	80 83       	st	Z, r24
	//MOTOR LINKS
	TCCR4C |= (1<<COM4D1) | (1<<PWM4D);		// OC4D aktiviert bei Compare Match, PWM4D aktiviert
 124:	e2 ec       	ldi	r30, 0xC2	; 194
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	89 60       	ori	r24, 0x09	; 9
 12c:	80 83       	st	Z, r24

	TCCR4B = 0;
 12e:	e1 ec       	ldi	r30, 0xC1	; 193
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	10 82       	st	Z, r1
	TCCR4D = 0;
 134:	10 92 c3 00 	sts	0x00C3, r1
	TCCR4E = 0;
 138:	10 92 c4 00 	sts	0x00C4, r1
	
	TCNT4 = 0;
 13c:	10 92 bf 00 	sts	0x00BF, r1
 140:	10 92 be 00 	sts	0x00BE, r1
	DT4 = 0;								// Dead Time Generator aus
 144:	10 92 d4 00 	sts	0x00D4, r1
	
	OCR4B = PWM_STOPP;						// PWM 0%
 148:	10 92 d0 00 	sts	0x00D0, r1
	OCR4D = PWM_STOPP;						// PWM 0%
 14c:	10 92 d2 00 	sts	0x00D2, r1
	
	TCCR4B |= (1<<CS40);					// ca. 64kHz
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
	
	status |= (1<<STATUS_PWM_TIMER);
 156:	80 91 0c 01 	lds	r24, 0x010C
 15a:	90 91 0d 01 	lds	r25, 0x010D
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	90 93 0d 01 	sts	0x010D, r25
 164:	80 93 0c 01 	sts	0x010C, r24
}
 168:	08 95       	ret

0000016a <pwm_timer_stop>:

void pwm_timer_stop(void)
{
	TCCR4B = 0;
 16a:	10 92 c1 00 	sts	0x00C1, r1
	TCCR4A = 0;
 16e:	10 92 c0 00 	sts	0x00C0, r1
	TCCR4C = 0;
 172:	10 92 c2 00 	sts	0x00C2, r1
	status &= ~(1<<STATUS_PWM_TIMER);
 176:	80 91 0c 01 	lds	r24, 0x010C
 17a:	90 91 0d 01 	lds	r25, 0x010D
 17e:	8f 7b       	andi	r24, 0xBF	; 191
 180:	90 93 0d 01 	sts	0x010D, r25
 184:	80 93 0c 01 	sts	0x010C, r24
}
 188:	08 95       	ret

0000018a <odometer_timer_init>:

void odometer_timer_init(void)
{
	TCCR1A = 0;
 18a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1<<ICNC1);					// Input Capture Mode aktiviert
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0;
 194:	10 92 82 00 	sts	0x0082, r1
	TCCR3A = 0;
 198:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = (1<<ICNC3);					// Input Capture Mode aktiviert
 19c:	80 93 91 00 	sts	0x0091, r24
	TCCR3C = 0;
 1a0:	10 92 92 00 	sts	0x0092, r1
}
 1a4:	08 95       	ret

000001a6 <odometer_links_start>:

void odometer_links_start(void)
{
	motor_left_count = 0;
 1a6:	10 92 02 01 	sts	0x0102, r1
	check_impuls_left = 0;
 1aa:	10 92 06 01 	sts	0x0106, r1
	TIMSK3 |= (1<<ICIE3);
 1ae:	e1 e7       	ldi	r30, 0x71	; 113
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	80 83       	st	Z, r24
	ICR3 = 0;
 1b8:	10 92 97 00 	sts	0x0097, r1
 1bc:	10 92 96 00 	sts	0x0096, r1
	TCNT3 = 0;		
 1c0:	10 92 95 00 	sts	0x0095, r1
 1c4:	10 92 94 00 	sts	0x0094, r1
	TCCR3B |= (1<<CS32);
 1c8:	e1 e9       	ldi	r30, 0x91	; 145
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	80 83       	st	Z, r24
	TIFR3 |= (1<<ICF3);
 1d2:	c5 9a       	sbi	0x18, 5	; 24
}
 1d4:	08 95       	ret

000001d6 <odometer_rechts_start>:

void odometer_rechts_start(void)
{
	motor_right_count = 0;
 1d6:	10 92 03 01 	sts	0x0103, r1
	check_impuls_right = 0;
 1da:	10 92 07 01 	sts	0x0107, r1
	TIMSK1 |= (1<<ICIE1);
 1de:	ef e6       	ldi	r30, 0x6F	; 111
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	80 83       	st	Z, r24
	ICR1 = 0;
 1e8:	10 92 87 00 	sts	0x0087, r1
 1ec:	10 92 86 00 	sts	0x0086, r1
	TCNT1 = 0;
 1f0:	10 92 85 00 	sts	0x0085, r1
 1f4:	10 92 84 00 	sts	0x0084, r1
	TCCR1B |= (1<<CS12);
 1f8:	e1 e8       	ldi	r30, 0x81	; 129
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	80 83       	st	Z, r24
	TIFR1 |= (1<<ICF1);
 202:	b5 9a       	sbi	0x16, 5	; 22
}
 204:	08 95       	ret

00000206 <odometer_links_stop>:

void odometer_links_stop(void)
{
	TCCR3B &= ~((1<<CS32) | (1<<CS31) | (1<<CS30));
 206:	e1 e9       	ldi	r30, 0x91	; 145
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	88 7f       	andi	r24, 0xF8	; 248
 20e:	80 83       	st	Z, r24
}
 210:	08 95       	ret

00000212 <odometer_rechts_stop>:

void odometer_rechts_stop(void)
{
	TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
 212:	e1 e8       	ldi	r30, 0x81	; 129
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	88 7f       	andi	r24, 0xF8	; 248
 21a:	80 83       	st	Z, r24
}
 21c:	08 95       	ret

0000021e <timer_beeper_init>:

void timer_beeper_init(void)
{
	//Timer0
	TCNT0 = 0;
 21e:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
 220:	17 bc       	out	0x27, r1	; 39
	
	TCCR0A |= (1<<COM0A0) | (1<<WGM01) | (1<<WGM00);
 222:	84 b5       	in	r24, 0x24	; 36
 224:	83 64       	ori	r24, 0x43	; 67
 226:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
 228:	85 b5       	in	r24, 0x25	; 37
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	85 bd       	out	0x25, r24	; 37
	
}
 22e:	08 95       	ret

00000230 <init>:
	CLKPR = 1;
}

void init(void)
{
	DDRB |= (1<<BEEPER) | (1<<MOTOR_R) | (1<<DEBUG_PIN) | (1<<LED_LH) | (1<<LED_LV) | (1<<LED_RH) | (1<<LED_RV);
 230:	84 b1       	in	r24, 0x04	; 4
 232:	8f 6d       	ori	r24, 0xDF	; 223
 234:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<DEBUG_PIN) | (1<<LED_LH) | (1<<LED_LV) | (1<<LED_RH) | (1<<LED_RV);
 236:	85 b1       	in	r24, 0x05	; 5
 238:	8f 61       	ori	r24, 0x1F	; 31
 23a:	85 b9       	out	0x05, r24	; 5
	
	DDRF |= (1<<MOT_L_V) | (1<<MOT_L_B) | (1<<MOT_R_V);
 23c:	80 b3       	in	r24, 0x10	; 16
 23e:	80 6e       	ori	r24, 0xE0	; 224
 240:	80 bb       	out	0x10, r24	; 16
	PORTF = 0;
 242:	11 ba       	out	0x11, r1	; 17
	
	DDRD |= (1<<DEBUG_PIN2) | (1<<MOTOR_L) | (1<<IR_SENDER) | (1<<LED_GRUEN) | (1<<LED_ROT);
 244:	8a b1       	in	r24, 0x0a	; 10
 246:	8c 6e       	ori	r24, 0xEC	; 236
 248:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<DEBUG_PIN2);// | (1<<WHEEL_RIGHT);
 24a:	5d 9a       	sbi	0x0b, 5	; 11
	
	DDRC |= (1<<MOT_R_B);
 24c:	3e 9a       	sbi	0x07, 6	; 7
//	PORTC |= (1<<WHEEL_LEFT);

	pwm_timer_init();
 24e:	0e 94 82 00 	call	0x104	; 0x104 <pwm_timer_init>
	odometer_timer_init();
 252:	0e 94 c5 00 	call	0x18a	; 0x18a <odometer_timer_init>
	timer_beeper_init();
 256:	0e 94 0f 01 	call	0x21e	; 0x21e <timer_beeper_init>
	sei();
 25a:	78 94       	sei
}
 25c:	08 95       	ret

0000025e <timer_beep_tone>:
	
}

void timer_beep_tone(unsigned int frequenz)
{
	OCR0A = frequenz;
 25e:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1<<CS02);
 260:	85 b5       	in	r24, 0x25	; 37
 262:	84 60       	ori	r24, 0x04	; 4
 264:	85 bd       	out	0x25, r24	; 37
}
 266:	08 95       	ret

00000268 <timer_beep_melodie>:

void timer_beep_melodie(void)
{
	
}
 268:	08 95       	ret

0000026a <drive_Robot>:

void drive_Robot(unsigned char dir_motr, unsigned char pwm_rechts, unsigned char dir_motl, unsigned char pwm_links, unsigned int impulse_rechts, unsigned int impulse_links)
{
 26a:	ef 92       	push	r14
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	d6 2f       	mov	r29, r22
 276:	c4 2f       	mov	r28, r20
 278:	12 2f       	mov	r17, r18
	
	// MOTOR RECHTS	
	if (dir_motr == 2)
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	31 f4       	brne	.+12     	; 0x28a <drive_Robot+0x20>
	{
		pwm_timer_stop();
 27e:	0e 94 b5 00 	call	0x16a	; 0x16a <pwm_timer_stop>
		PORTB |= (1<<MOTOR_R);
 282:	2e 9a       	sbi	0x05, 6	; 5
		PORTF &= ~(1<<MOT_R_V);
 284:	8f 98       	cbi	0x11, 7	; 17
		PORTC &= ~(1<<MOT_R_B);
 286:	46 98       	cbi	0x08, 6	; 8
 288:	17 c0       	rjmp	.+46     	; 0x2b8 <drive_Robot+0x4e>
	}
	else if (dir_motr == 1)
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	59 f4       	brne	.+22     	; 0x2a4 <drive_Robot+0x3a>
	{
		if(!(status&(1<<STATUS_PWM_TIMER)))
 28e:	80 91 0c 01 	lds	r24, 0x010C
 292:	90 91 0d 01 	lds	r25, 0x010D
 296:	86 fd       	sbrc	r24, 6
 298:	02 c0       	rjmp	.+4      	; 0x29e <drive_Robot+0x34>
		{
			pwm_timer_start();
 29a:	0e 94 8d 00 	call	0x11a	; 0x11a <pwm_timer_start>
		}
		PORTF |= (1<<MOT_R_V);
 29e:	8f 9a       	sbi	0x11, 7	; 17
		PORTC &= ~(1<<MOT_R_B);
 2a0:	46 98       	cbi	0x08, 6	; 8
 2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <drive_Robot+0x4e>
	}
	else
	{
		if(!(status&(1<<STATUS_PWM_TIMER)))
 2a4:	80 91 0c 01 	lds	r24, 0x010C
 2a8:	90 91 0d 01 	lds	r25, 0x010D
 2ac:	86 fd       	sbrc	r24, 6
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <drive_Robot+0x4a>
		{
			pwm_timer_start();
 2b0:	0e 94 8d 00 	call	0x11a	; 0x11a <pwm_timer_start>
		}
		PORTF &= ~(1<<MOT_R_V);
 2b4:	8f 98       	cbi	0x11, 7	; 17
		PORTC |= (1<<MOT_R_B);
 2b6:	46 9a       	sbi	0x08, 6	; 8
	}
	
	// MOTOR LINKS
	if (dir_motl == 2)
 2b8:	c2 30       	cpi	r28, 0x02	; 2
 2ba:	31 f4       	brne	.+12     	; 0x2c8 <drive_Robot+0x5e>
	{
		pwm_timer_stop();
 2bc:	0e 94 b5 00 	call	0x16a	; 0x16a <pwm_timer_stop>
		PORTD |= (1<<MOTOR_L);
 2c0:	5f 9a       	sbi	0x0b, 7	; 11
		PORTF &= ~(1<<MOT_L_V);
 2c2:	8d 98       	cbi	0x11, 5	; 17
		PORTF &= ~(1<<MOT_L_B);
 2c4:	8e 98       	cbi	0x11, 6	; 17
 2c6:	17 c0       	rjmp	.+46     	; 0x2f6 <drive_Robot+0x8c>
	}
	else if (dir_motl == 1)
 2c8:	c1 30       	cpi	r28, 0x01	; 1
 2ca:	59 f4       	brne	.+22     	; 0x2e2 <drive_Robot+0x78>
	{
		if(!(status&(1<<STATUS_PWM_TIMER)))
 2cc:	80 91 0c 01 	lds	r24, 0x010C
 2d0:	90 91 0d 01 	lds	r25, 0x010D
 2d4:	86 fd       	sbrc	r24, 6
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <drive_Robot+0x72>
		{
			pwm_timer_start();
 2d8:	0e 94 8d 00 	call	0x11a	; 0x11a <pwm_timer_start>
		}
		PORTF |= (1<<MOT_L_V);
 2dc:	8d 9a       	sbi	0x11, 5	; 17
		PORTF &= ~(1<<MOT_L_B);
 2de:	8e 98       	cbi	0x11, 6	; 17
 2e0:	0a c0       	rjmp	.+20     	; 0x2f6 <drive_Robot+0x8c>
	}
	else
	{
		if(!(status&(1<<STATUS_PWM_TIMER)))
 2e2:	80 91 0c 01 	lds	r24, 0x010C
 2e6:	90 91 0d 01 	lds	r25, 0x010D
 2ea:	86 fd       	sbrc	r24, 6
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <drive_Robot+0x88>
		{
			pwm_timer_start();
 2ee:	0e 94 8d 00 	call	0x11a	; 0x11a <pwm_timer_start>
		}
		PORTF &= ~(1<<MOT_L_V);
 2f2:	8d 98       	cbi	0x11, 5	; 17
		PORTF |= (1<<MOT_L_B);
 2f4:	8e 9a       	sbi	0x11, 6	; 17
	}
	
	if (status&(1<<STATUS_PWM_TIMER))
 2f6:	80 91 0c 01 	lds	r24, 0x010C
 2fa:	90 91 0d 01 	lds	r25, 0x010D
 2fe:	86 ff       	sbrs	r24, 6
 300:	3f c0       	rjmp	.+126    	; 0x380 <drive_Robot+0x116>
	{
		OCR4B = pwm_rechts;
 302:	d0 93 d0 00 	sts	0x00D0, r29
		OCR4D = pwm_links;
 306:	10 93 d2 00 	sts	0x00D2, r17
			
		impuls_right_set = impulse_rechts;
 30a:	00 93 05 01 	sts	0x0105, r16
		impuls_left_set = impulse_links;
 30e:	e0 92 04 01 	sts	0x0104, r14
		
		if (pwm_rechts != PWM_STOPP)
 312:	dd 23       	and	r29, r29
 314:	61 f0       	breq	.+24     	; 0x32e <drive_Robot+0xc4>
		{
			odometer_rechts_start();
 316:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <odometer_rechts_start>
			status &= ~(1<<STATUS_MOT_R_READY);
 31a:	80 91 0c 01 	lds	r24, 0x010C
 31e:	90 91 0d 01 	lds	r25, 0x010D
 322:	8f 7e       	andi	r24, 0xEF	; 239
 324:	90 93 0d 01 	sts	0x010D, r25
 328:	80 93 0c 01 	sts	0x010C, r24
 32c:	09 c0       	rjmp	.+18     	; 0x340 <drive_Robot+0xd6>
		}
		else
		{
			status |= (1<<STATUS_MOT_R_READY);
 32e:	80 91 0c 01 	lds	r24, 0x010C
 332:	90 91 0d 01 	lds	r25, 0x010D
 336:	80 61       	ori	r24, 0x10	; 16
 338:	90 93 0d 01 	sts	0x010D, r25
 33c:	80 93 0c 01 	sts	0x010C, r24
		}
		
		if (pwm_links != PWM_STOPP)
 340:	11 23       	and	r17, r17
 342:	61 f0       	breq	.+24     	; 0x35c <drive_Robot+0xf2>
		{
			odometer_links_start();
 344:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <odometer_links_start>
			status &= ~(1<<STATUS_MOT_L_READY);
 348:	80 91 0c 01 	lds	r24, 0x010C
 34c:	90 91 0d 01 	lds	r25, 0x010D
 350:	8f 7d       	andi	r24, 0xDF	; 223
 352:	90 93 0d 01 	sts	0x010D, r25
 356:	80 93 0c 01 	sts	0x010C, r24
 35a:	09 c0       	rjmp	.+18     	; 0x36e <drive_Robot+0x104>
		}
		else
		{
			status |= (1<<STATUS_MOT_L_READY);
 35c:	80 91 0c 01 	lds	r24, 0x010C
 360:	90 91 0d 01 	lds	r25, 0x010D
 364:	80 62       	ori	r24, 0x20	; 32
 366:	90 93 0d 01 	sts	0x010D, r25
 36a:	80 93 0c 01 	sts	0x010C, r24
		}
		
		status |= (1<<STATUS_BUSY);		
 36e:	80 91 0c 01 	lds	r24, 0x010C
 372:	90 91 0d 01 	lds	r25, 0x010D
 376:	82 60       	ori	r24, 0x02	; 2
 378:	90 93 0d 01 	sts	0x010D, r25
 37c:	80 93 0c 01 	sts	0x010C, r24
	}
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ef 90       	pop	r14
 38a:	08 95       	ret

0000038c <check_impulse>:
		//TCCR3B &= ~((1<<CS32) | (1<<CS31) | (1<<CS30));
		//TIMSK3 = 0;
		//OCR4D = PWM_STOPP;
	//}

	if (status&(1<<STATUS_MOT_R_READY) && status&(1<<STATUS_MOT_L_READY))
 38c:	80 91 0c 01 	lds	r24, 0x010C
 390:	90 91 0d 01 	lds	r25, 0x010D
 394:	84 ff       	sbrs	r24, 4
 396:	11 c0       	rjmp	.+34     	; 0x3ba <check_impulse+0x2e>
 398:	80 91 0c 01 	lds	r24, 0x010C
 39c:	90 91 0d 01 	lds	r25, 0x010D
 3a0:	85 ff       	sbrs	r24, 5
 3a2:	0d c0       	rjmp	.+26     	; 0x3be <check_impulse+0x32>
	{
		status &= ~(1<<STATUS_BUSY);
 3a4:	80 91 0c 01 	lds	r24, 0x010C
 3a8:	90 91 0d 01 	lds	r25, 0x010D
 3ac:	8d 7f       	andi	r24, 0xFD	; 253
 3ae:	90 93 0d 01 	sts	0x010D, r25
 3b2:	80 93 0c 01 	sts	0x010C, r24
		return 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	08 95       	ret
	} 
	else
	{
		return 0;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	08 95       	ret
 3be:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 3c0:	08 95       	ret

000003c2 <beep>:

void beep(unsigned char times)
{
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
	for (int i=0; i < times ; i++)
 3ca:	c8 2f       	mov	r28, r24
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	1c 16       	cp	r1, r28
 3d0:	1d 06       	cpc	r1, r29
 3d2:	0c f5       	brge	.+66     	; 0x416 <beep+0x54>
 3d4:	00 e0       	ldi	r16, 0x00	; 0
 3d6:	10 e0       	ldi	r17, 0x00	; 0
	{
		timer_beep_tone(BEEP);
 3d8:	88 e0       	ldi	r24, 0x08	; 8
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 2f 01 	call	0x25e	; 0x25e <timer_beep_tone>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	90 e7       	ldi	r25, 0x70	; 112
 3e4:	a2 e0       	ldi	r26, 0x02	; 2
 3e6:	81 50       	subi	r24, 0x01	; 1
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	a0 40       	sbci	r26, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <beep+0x24>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <beep+0x2e>
 3f0:	00 00       	nop
		_delay_ms(100);
		timer_beep_tone(NONE);
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 2f 01 	call	0x25e	; 0x25e <timer_beep_tone>
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	90 e7       	ldi	r25, 0x70	; 112
 3fe:	a2 e0       	ldi	r26, 0x02	; 2
 400:	81 50       	subi	r24, 0x01	; 1
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	a0 40       	sbci	r26, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <beep+0x3e>
 408:	00 c0       	rjmp	.+0      	; 0x40a <beep+0x48>
 40a:	00 00       	nop
	}
}

void beep(unsigned char times)
{
	for (int i=0; i < times ; i++)
 40c:	0f 5f       	subi	r16, 0xFF	; 255
 40e:	1f 4f       	sbci	r17, 0xFF	; 255
 410:	0c 17       	cp	r16, r28
 412:	1d 07       	cpc	r17, r29
 414:	0c f3       	brlt	.-62     	; 0x3d8 <beep+0x16>
		timer_beep_tone(BEEP);
		_delay_ms(100);
		timer_beep_tone(NONE);
		_delay_ms(100);
	}
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <__vector_16>:


// rechter Motorgeber

ISR(TIMER1_CAPT_vect)
{
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 432:	8a e1       	ldi	r24, 0x1A	; 26
 434:	8a 95       	dec	r24
 436:	f1 f7       	brne	.-4      	; 0x434 <__vector_16+0x14>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__vector_16+0x1a>
	_delay_us(10);
	if (status&(1<<STATUS_MOT_R_READY))
 43a:	80 91 0c 01 	lds	r24, 0x010C
 43e:	90 91 0d 01 	lds	r25, 0x010D
 442:	84 fd       	sbrc	r24, 4
 444:	3e c0       	rjmp	.+124    	; 0x4c2 <__vector_16+0xa2>
	{
	}
	else
	{
		if (!(PIND&(1<<WHEEL_RIGHT)))
 446:	4c 99       	sbic	0x09, 4	; 9
 448:	3c c0       	rjmp	.+120    	; 0x4c2 <__vector_16+0xa2>
		{
//			PORTB &=~(1<<DEBUG_PIN);
			if (motor_right_count == 0)
 44a:	80 91 03 01 	lds	r24, 0x0103
 44e:	88 23       	and	r24, r24
 450:	69 f4       	brne	.+26     	; 0x46c <__vector_16+0x4c>
			{
				check_impuls_right++;
 452:	80 91 07 01 	lds	r24, 0x0107
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	80 93 07 01 	sts	0x0107, r24
				motor_right_count=1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	80 93 03 01 	sts	0x0103, r24
				TCNT1 = 0;
 462:	10 92 85 00 	sts	0x0085, r1
 466:	10 92 84 00 	sts	0x0084, r1
 46a:	13 c0       	rjmp	.+38     	; 0x492 <__vector_16+0x72>
			}
			else
			{
				impulstime_right = ICR1;
 46c:	80 91 86 00 	lds	r24, 0x0086
 470:	90 91 87 00 	lds	r25, 0x0087
 474:	90 93 0b 01 	sts	0x010B, r25
 478:	80 93 0a 01 	sts	0x010A, r24
				check_impuls_right++;
 47c:	80 91 07 01 	lds	r24, 0x0107
 480:	8f 5f       	subi	r24, 0xFF	; 255
 482:	80 93 07 01 	sts	0x0107, r24
				motor_right_count = 0;
 486:	10 92 03 01 	sts	0x0103, r1
				TCNT1 = 0;
 48a:	10 92 85 00 	sts	0x0085, r1
 48e:	10 92 84 00 	sts	0x0084, r1
			}
	
			if (check_impuls_right >= impuls_right_set)
 492:	90 91 07 01 	lds	r25, 0x0107
 496:	80 91 05 01 	lds	r24, 0x0105
 49a:	98 17       	cp	r25, r24
 49c:	90 f0       	brcs	.+36     	; 0x4c2 <__vector_16+0xa2>
			{
				status |= (1<<STATUS_MOT_R_READY);
 49e:	80 91 0c 01 	lds	r24, 0x010C
 4a2:	90 91 0d 01 	lds	r25, 0x010D
 4a6:	80 61       	ori	r24, 0x10	; 16
 4a8:	90 93 0d 01 	sts	0x010D, r25
 4ac:	80 93 0c 01 	sts	0x010C, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
 4b0:	e1 e8       	ldi	r30, 0x81	; 129
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	88 7f       	andi	r24, 0xF8	; 248
 4b8:	80 83       	st	Z, r24
				TIMSK1 = 0;
 4ba:	10 92 6f 00 	sts	0x006F, r1
				OCR4B = PWM_STOPP;
 4be:	10 92 d0 00 	sts	0x00D0, r1
			}
//			_delay_ms(5);
//			PORTB |= (1<<DEBUG_PIN);
		}	
	}
	TIFR1 |= (1<<ICF1);
 4c2:	b5 9a       	sbi	0x16, 5	; 22
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_31>:


// linker Motorgeber

ISR(TIMER3_CAPT_vect)
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
 4e8:	8a e1       	ldi	r24, 0x1A	; 26
 4ea:	8a 95       	dec	r24
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <__vector_31+0x14>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <__vector_31+0x1a>
	unsigned int calc_pwm=0;
	
	_delay_us(10);
	if (status&(1<<STATUS_MOT_L_READY))
 4f0:	80 91 0c 01 	lds	r24, 0x010C
 4f4:	90 91 0d 01 	lds	r25, 0x010D
 4f8:	85 fd       	sbrc	r24, 5
 4fa:	3e c0       	rjmp	.+124    	; 0x578 <__vector_31+0xa2>
	{
	}
	else
	{
		if (!(PINC&(1<<WHEEL_LEFT)))
 4fc:	37 99       	sbic	0x06, 7	; 6
 4fe:	3c c0       	rjmp	.+120    	; 0x578 <__vector_31+0xa2>
		{
//			PORTD &=~(1<<DEBUG_PIN2);
			if (motor_left_count == 0)
 500:	80 91 02 01 	lds	r24, 0x0102
 504:	88 23       	and	r24, r24
 506:	69 f4       	brne	.+26     	; 0x522 <__vector_31+0x4c>
			{
				check_impuls_left++;
 508:	80 91 06 01 	lds	r24, 0x0106
 50c:	8f 5f       	subi	r24, 0xFF	; 255
 50e:	80 93 06 01 	sts	0x0106, r24
				motor_left_count=1;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	80 93 02 01 	sts	0x0102, r24
				TCNT3 = 0;
 518:	10 92 95 00 	sts	0x0095, r1
 51c:	10 92 94 00 	sts	0x0094, r1
 520:	13 c0       	rjmp	.+38     	; 0x548 <__vector_31+0x72>
			}
			else
			{
				impulstime_left = ICR3;
 522:	80 91 96 00 	lds	r24, 0x0096
 526:	90 91 97 00 	lds	r25, 0x0097
 52a:	90 93 09 01 	sts	0x0109, r25
 52e:	80 93 08 01 	sts	0x0108, r24
				check_impuls_left++;
 532:	80 91 06 01 	lds	r24, 0x0106
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	80 93 06 01 	sts	0x0106, r24
				//} 
				//else
				//{
					//// Motor zu langsam
				//}
				motor_left_count = 0;
 53c:	10 92 02 01 	sts	0x0102, r1
				TCNT3 = 0;
 540:	10 92 95 00 	sts	0x0095, r1
 544:	10 92 94 00 	sts	0x0094, r1
			}
		
			if (check_impuls_left >= impuls_left_set)
 548:	90 91 06 01 	lds	r25, 0x0106
 54c:	80 91 04 01 	lds	r24, 0x0104
 550:	98 17       	cp	r25, r24
 552:	90 f0       	brcs	.+36     	; 0x578 <__vector_31+0xa2>
			{
				status |= (1<<STATUS_MOT_L_READY);
 554:	80 91 0c 01 	lds	r24, 0x010C
 558:	90 91 0d 01 	lds	r25, 0x010D
 55c:	80 62       	ori	r24, 0x20	; 32
 55e:	90 93 0d 01 	sts	0x010D, r25
 562:	80 93 0c 01 	sts	0x010C, r24
				TCCR3B &= ~((1<<CS32) | (1<<CS31) | (1<<CS30));
 566:	e1 e9       	ldi	r30, 0x91	; 145
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	88 7f       	andi	r24, 0xF8	; 248
 56e:	80 83       	st	Z, r24
				TIMSK3 = 0;
 570:	10 92 71 00 	sts	0x0071, r1
				OCR4D = PWM_STOPP;
 574:	10 92 d2 00 	sts	0x00D2, r1
			}
//			_delay_ms(5);
//			PORTD |= (1<<DEBUG_PIN2);
		}
	}	
	TIFR3 |= (1<<ICF3);
 578:	c5 9a       	sbi	0x18, 5	; 24
}
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	9f 91       	pop	r25
 580:	8f 91       	pop	r24
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <main>:

int main(void)
{	
	unsigned char programm_step = 1;
	
	set_fuses();
 58c:	0e 94 75 00 	call	0xea	; 0xea <set_fuses>
	init();
 590:	0e 94 18 01 	call	0x230	; 0x230 <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	99 e6       	ldi	r25, 0x69	; 105
 598:	a8 e1       	ldi	r26, 0x18	; 24
 59a:	81 50       	subi	r24, 0x01	; 1
 59c:	90 40       	sbci	r25, 0x00	; 0
 59e:	a0 40       	sbci	r26, 0x00	; 0
 5a0:	e1 f7       	brne	.-8      	; 0x59a <main+0xe>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <main+0x18>
 5a4:	00 00       	nop

	_delay_ms(1000);

	beep(5);
 5a6:	85 e0       	ldi	r24, 0x05	; 5
 5a8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <beep>
 5ac:	8f ef       	ldi	r24, 0xFF	; 255
 5ae:	93 ed       	ldi	r25, 0xD3	; 211
 5b0:	a0 e3       	ldi	r26, 0x30	; 48
 5b2:	81 50       	subi	r24, 0x01	; 1
 5b4:	90 40       	sbci	r25, 0x00	; 0
 5b6:	a0 40       	sbci	r26, 0x00	; 0
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <main+0x26>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <main+0x30>
 5bc:	00 00       	nop
			}
			break;
		}		
	}
*/
	pwm_left = 250;
 5be:	8a ef       	ldi	r24, 0xFA	; 250
 5c0:	80 93 01 01 	sts	0x0101, r24
	pwm_right = 242;
 5c4:	82 ef       	ldi	r24, 0xF2	; 242
 5c6:	80 93 00 01 	sts	0x0100, r24
	drive_Robot(MOT_FORWARD,pwm_right,MOT_FORWARD,pwm_left,3*ONE_TURN,3*ONE_TURN);
 5ca:	60 91 00 01 	lds	r22, 0x0100
 5ce:	20 91 01 01 	lds	r18, 0x0101
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	0e e1       	ldi	r16, 0x1E	; 30
 5d8:	10 e0       	ldi	r17, 0x00	; 0
 5da:	0f 2e       	mov	r0, r31
 5dc:	fe e1       	ldi	r31, 0x1E	; 30
 5de:	ef 2e       	mov	r14, r31
 5e0:	ff 24       	eor	r15, r15
 5e2:	f0 2d       	mov	r31, r0
 5e4:	0e 94 35 01 	call	0x26a	; 0x26a <drive_Robot>
	while(1)
	{
		if(!check_impulse()) {}
		else
		{
			PORTD ^= (1<<LED_GRUEN);
 5e8:	c8 e0       	ldi	r28, 0x08	; 8
	pwm_right = pwm_left-(pwm_left/RATIO_Left_Right);
	drive_Robot(MOT_FAST_STOPP,pwm_right,MOT_FAST_STOPP,pwm_left,ONE_TURN,ONE_TURN);
*/
	while(1)
	{
		if(!check_impulse()) {}
 5ea:	0e 94 c6 01 	call	0x38c	; 0x38c <check_impulse>
 5ee:	88 23       	and	r24, r24
 5f0:	e1 f3       	breq	.-8      	; 0x5ea <main+0x5e>
		else
		{
			PORTD ^= (1<<LED_GRUEN);
 5f2:	8b b1       	in	r24, 0x0b	; 11
 5f4:	8c 27       	eor	r24, r28
 5f6:	8b b9       	out	0x0b, r24	; 11
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	91 ee       	ldi	r25, 0xE1	; 225
 5fc:	a4 e0       	ldi	r26, 0x04	; 4
 5fe:	81 50       	subi	r24, 0x01	; 1
 600:	90 40       	sbci	r25, 0x00	; 0
 602:	a0 40       	sbci	r26, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <main+0x72>
 606:	00 c0       	rjmp	.+0      	; 0x608 <main+0x7c>
 608:	00 00       	nop
 60a:	ef cf       	rjmp	.-34     	; 0x5ea <main+0x5e>

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
