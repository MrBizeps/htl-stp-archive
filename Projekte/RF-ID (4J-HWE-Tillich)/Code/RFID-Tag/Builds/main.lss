
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000003d6  0000044a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000bf4  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000da6  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001dfe  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00001e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000017c  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000028  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000b9  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 ed       	ldi	r30, 0xD6	; 214
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 31       	cpi	r26, 0x1A	; 26
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 c1 01 	call	0x382	; 0x382 <main>
  d2:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <getTaste>:

unsigned char getTaste(void)
{
    char zeile,spalte;
    // *********** Auswertung der Zeile ***********************
    DDR_USED = 0xF0; //Zwischenschritt lt. Dantenblatt für Umkonfiguration der Portpins
  da:	80 ef       	ldi	r24, 0xF0	; 240
  dc:	84 b9       	out	0x04, r24	; 4
    PORT_USED = 0xF0; //von INPUT mit Pull Up auf OUTPUT LOW
  de:	85 b9       	out	0x05, r24	; 5
    DDR_USED = 0x0F; //PD 4-7 als OUTPUT (Spalten), PB 3-0 als INPUT (Zeilen)
  e0:	8f e0       	ldi	r24, 0x0F	; 15
  e2:	84 b9       	out	0x04, r24	; 4
    PORT_USED = PORT_USED | 0xF0; //PD 3-0 int. Pull Up Widerstände ein
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	80 6f       	ori	r24, 0xF0	; 240
  e8:	85 b9       	out	0x05, r24	; 5
    PORT_USED = PORT_USED & 0xF0; //PD 4-7 auf "0"
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	85 b9       	out	0x05, r24	; 5
    
    switch ((PIND & 0xF0))
  f0:	89 b1       	in	r24, 0x09	; 9
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	80 3b       	cpi	r24, 0xB0	; 176
  f6:	59 f0       	breq	.+22     	; 0x10e <getTaste+0x34>
  f8:	20 f4       	brcc	.+8      	; 0x102 <getTaste+0x28>
  fa:	80 37       	cpi	r24, 0x70	; 112
  fc:	51 f4       	brne	.+20     	; 0x112 <getTaste+0x38>
        case 0xD0: //Zeile PD1 = "0" 0000 1101
            spalte = 2; break;
        case 0xB0: //Zeile PD2 = "0" 0000 1011
            spalte = 3; break;
        case 0x70: //Zeile PD3 = "0" 0000 0111
            spalte = 4; break;
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	0b c0       	rjmp	.+22     	; 0x118 <getTaste+0x3e>
    PORT_USED = 0xF0; //von INPUT mit Pull Up auf OUTPUT LOW
    DDR_USED = 0x0F; //PD 4-7 als OUTPUT (Spalten), PB 3-0 als INPUT (Zeilen)
    PORT_USED = PORT_USED | 0xF0; //PD 3-0 int. Pull Up Widerstände ein
    PORT_USED = PORT_USED & 0xF0; //PD 4-7 auf "0"
    
    switch ((PIND & 0xF0))
 102:	80 3d       	cpi	r24, 0xD0	; 208
 104:	41 f0       	breq	.+16     	; 0x116 <getTaste+0x3c>
 106:	80 3e       	cpi	r24, 0xE0	; 224
 108:	21 f4       	brne	.+8      	; 0x112 <getTaste+0x38>
    {   // Spalte Zeile
        case 0xE0: //Zeile PD0 = "0" 0000 1110
            spalte = 1; break;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	05 c0       	rjmp	.+10     	; 0x118 <getTaste+0x3e>
        case 0xD0: //Zeile PD1 = "0" 0000 1101
            spalte = 2; break;
        case 0xB0: //Zeile PD2 = "0" 0000 1011
            spalte = 3; break;
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	03 c0       	rjmp	.+6      	; 0x118 <getTaste+0x3e>
        case 0x70: //Zeile PD3 = "0" 0000 0111
            spalte = 4; break;
        default : //mehrere Tasten wurden gedrückt
            spalte = 0; break;
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	01 c0       	rjmp	.+2      	; 0x118 <getTaste+0x3e>
    switch ((PIND & 0xF0))
    {   // Spalte Zeile
        case 0xE0: //Zeile PD0 = "0" 0000 1110
            spalte = 1; break;
        case 0xD0: //Zeile PD1 = "0" 0000 1101
            spalte = 2; break;
 116:	82 e0       	ldi	r24, 0x02	; 2
        default : //mehrere Tasten wurden gedrückt
            spalte = 0; break;
    }
    
    // ************ Auswertung der Spalten ******************
    DDR_USED = 0x0F; //Zwischenschritt lt. Dantenblatt für Umkonfiguration der Portpins
 118:	9f e0       	ldi	r25, 0x0F	; 15
 11a:	94 b9       	out	0x04, r25	; 4
    PORT_USED = 0x0F; //von INPUT mit Pull Up auf OUTPUT LOW
 11c:	95 b9       	out	0x05, r25	; 5
    DDR_USED = 0xF0; //PB 4-7 als INPUT (Spalten), PD3-0 als OUTPUT (Zeilen)
 11e:	20 ef       	ldi	r18, 0xF0	; 240
 120:	24 b9       	out	0x04, r18	; 4
    PORT_USED = (spalte | 0x0F); //Erg. von Zeile auf PD3-0 damit gedr. Zeile=0 und alle anderen Zeilen=1
 122:	95 b9       	out	0x05, r25	; 5
    
    //PD 4-7 int. Pull Up Widerstände ein
    switch (PIN_USED & 0x0F) // oberen 4 Bit = 1 => gedr. Taste zieht dann Spalte von 1=>0
 124:	e3 b1       	in	r30, 0x03	; 3
 126:	ef 70       	andi	r30, 0x0F	; 15
 128:	e7 50       	subi	r30, 0x07	; 7
 12a:	e8 30       	cpi	r30, 0x08	; 8
 12c:	c8 f4       	brcc	.+50     	; 0x160 <getTaste+0x86>
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e0 50       	subi	r30, 0x00	; 0
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	90 81       	ld	r25, Z
            zeile = 4; break;
        default: //mehrere Spalten sind auf "0"
            zeile = 0; break;
    }

    if      (zeile == 1 && spalte == 1) return '1';
 136:	91 30       	cpi	r25, 0x01	; 1
 138:	49 f4       	brne	.+18     	; 0x14c <getTaste+0x72>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	59 f1       	breq	.+86     	; 0x194 <getTaste+0xba>
    else if (zeile == 1 && spalte == 2) return '2';
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	59 f1       	breq	.+86     	; 0x198 <getTaste+0xbe>
    else if (zeile == 1 && spalte == 3) return '3';
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	59 f1       	breq	.+86     	; 0x19c <getTaste+0xc2>
    else if (zeile == 1 && spalte == 4) return 'A';
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	59 f4       	brne	.+22     	; 0x160 <getTaste+0x86>
 14a:	2a c0       	rjmp	.+84     	; 0x1a0 <getTaste+0xc6>
    else if (zeile == 2 && spalte == 1) return '4';
 14c:	92 30       	cpi	r25, 0x02	; 2
 14e:	51 f4       	brne	.+20     	; 0x164 <getTaste+0x8a>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	41 f1       	breq	.+80     	; 0x1a4 <getTaste+0xca>
    else if (zeile == 2 && spalte == 2) return '5';
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	41 f1       	breq	.+80     	; 0x1a8 <getTaste+0xce>
    else if (zeile == 2 && spalte == 3) return '6';
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	41 f1       	breq	.+80     	; 0x1ac <getTaste+0xd2>
    else if (zeile == 2 && spalte == 4) return 'B';
 15c:	84 30       	cpi	r24, 0x04	; 4
 15e:	41 f1       	breq	.+80     	; 0x1b0 <getTaste+0xd6>
    else if (zeile == 3 && spalte == 4) return 'C';
    else if (zeile == 4 && spalte == 1) return '*';
    else if (zeile == 4 && spalte == 2) return '0';
    else if (zeile == 4 && spalte == 3) return '#';
    else if (zeile == 4 && spalte == 4) return 'D';
    return 0;
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret
    else if (zeile == 1 && spalte == 4) return 'A';
    else if (zeile == 2 && spalte == 1) return '4';
    else if (zeile == 2 && spalte == 2) return '5';
    else if (zeile == 2 && spalte == 3) return '6';
    else if (zeile == 2 && spalte == 4) return 'B';
    else if (zeile == 3 && spalte == 1) return '7';
 164:	93 30       	cpi	r25, 0x03	; 3
 166:	51 f4       	brne	.+20     	; 0x17c <getTaste+0xa2>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	21 f1       	breq	.+72     	; 0x1b4 <getTaste+0xda>
    else if (zeile == 3 && spalte == 2) return '8';
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	21 f1       	breq	.+72     	; 0x1b8 <getTaste+0xde>
    else if (zeile == 3 && spalte == 3) return '9';
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	21 f1       	breq	.+72     	; 0x1bc <getTaste+0xe2>
    else if (zeile == 3 && spalte == 4) return 'C';
 174:	84 30       	cpi	r24, 0x04	; 4
 176:	a1 f7       	brne	.-24     	; 0x160 <getTaste+0x86>
 178:	83 e4       	ldi	r24, 0x43	; 67
 17a:	08 95       	ret
    else if (zeile == 4 && spalte == 1) return '*';
 17c:	94 30       	cpi	r25, 0x04	; 4
 17e:	81 f7       	brne	.-32     	; 0x160 <getTaste+0x86>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	f1 f0       	breq	.+60     	; 0x1c0 <getTaste+0xe6>
    else if (zeile == 4 && spalte == 2) return '0';
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	f1 f0       	breq	.+60     	; 0x1c4 <getTaste+0xea>
    else if (zeile == 4 && spalte == 3) return '#';
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	f1 f0       	breq	.+60     	; 0x1c8 <getTaste+0xee>
    else if (zeile == 4 && spalte == 4) return 'D';
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	41 f7       	brne	.-48     	; 0x160 <getTaste+0x86>
 190:	84 e4       	ldi	r24, 0x44	; 68
 192:	08 95       	ret
            zeile = 4; break;
        default: //mehrere Spalten sind auf "0"
            zeile = 0; break;
    }

    if      (zeile == 1 && spalte == 1) return '1';
 194:	81 e3       	ldi	r24, 0x31	; 49
 196:	08 95       	ret
    else if (zeile == 1 && spalte == 2) return '2';
 198:	82 e3       	ldi	r24, 0x32	; 50
 19a:	08 95       	ret
    else if (zeile == 1 && spalte == 3) return '3';
 19c:	83 e3       	ldi	r24, 0x33	; 51
 19e:	08 95       	ret
    else if (zeile == 1 && spalte == 4) return 'A';
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	08 95       	ret
    else if (zeile == 2 && spalte == 1) return '4';
 1a4:	84 e3       	ldi	r24, 0x34	; 52
 1a6:	08 95       	ret
    else if (zeile == 2 && spalte == 2) return '5';
 1a8:	85 e3       	ldi	r24, 0x35	; 53
 1aa:	08 95       	ret
    else if (zeile == 2 && spalte == 3) return '6';
 1ac:	86 e3       	ldi	r24, 0x36	; 54
 1ae:	08 95       	ret
    else if (zeile == 2 && spalte == 4) return 'B';
 1b0:	82 e4       	ldi	r24, 0x42	; 66
 1b2:	08 95       	ret
    else if (zeile == 3 && spalte == 1) return '7';
 1b4:	87 e3       	ldi	r24, 0x37	; 55
 1b6:	08 95       	ret
    else if (zeile == 3 && spalte == 2) return '8';
 1b8:	88 e3       	ldi	r24, 0x38	; 56
 1ba:	08 95       	ret
    else if (zeile == 3 && spalte == 3) return '9';
 1bc:	89 e3       	ldi	r24, 0x39	; 57
 1be:	08 95       	ret
    else if (zeile == 3 && spalte == 4) return 'C';
    else if (zeile == 4 && spalte == 1) return '*';
 1c0:	8a e2       	ldi	r24, 0x2A	; 42
 1c2:	08 95       	ret
    else if (zeile == 4 && spalte == 2) return '0';
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	08 95       	ret
    else if (zeile == 4 && spalte == 3) return '#';
 1c8:	83 e2       	ldi	r24, 0x23	; 35
    else if (zeile == 4 && spalte == 4) return 'D';
    return 0;
 1ca:	08 95       	ret

000001cc <initTag>:
}

void initTag(void)
{
    /* TX_PIN als Ausgang setzen */
    SET_BIT(TX_DDR,TX_PIN);
 1cc:	20 9a       	sbi	0x04, 0	; 4
    
    /* TCNT0 mit clk/8 prescaler einstellen bzw. einschalten */
    SET_BIT(TCCR0B,CS01);
 1ce:	85 b5       	in	r24, 0x25	; 37
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	85 bd       	out	0x25, r24	; 37
 1d4:	08 95       	ret

000001d6 <checksumme>:

uint16_t checksumme(const uint8_t* data, uint16_t bytes)
{
    
    uint16_t summe1 = 0xFF;
    uint16_t summe2 = 0xFF;
 1d6:	4f ef       	ldi	r20, 0xFF	; 255
 1d8:	50 e0       	ldi	r21, 0x00	; 0
}

uint16_t checksumme(const uint8_t* data, uint16_t bytes)
{
    
    uint16_t summe1 = 0xFF;
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t summe2 = 0xFF;
    
    uint16_t laenge;
    
    while (bytes)
 1de:	61 15       	cp	r22, r1
 1e0:	71 05       	cpc	r23, r1
 1e2:	09 f1       	breq	.+66     	; 0x226 <checksumme+0x50>
    {
        /* Maximale L√§nge bevor Overflow ensteht */
        laenge = (bytes > 20) ? 20 : bytes;
 1e4:	db 01       	movw	r26, r22
 1e6:	65 31       	cpi	r22, 0x15	; 21
 1e8:	71 05       	cpc	r23, r1
 1ea:	10 f0       	brcs	.+4      	; 0x1f0 <checksumme+0x1a>
 1ec:	a4 e1       	ldi	r26, 0x14	; 20
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
        
        bytes -= laenge;
 1f0:	6a 1b       	sub	r22, r26
 1f2:	7b 0b       	sbc	r23, r27
 1f4:	fc 01       	movw	r30, r24
 1f6:	a8 0f       	add	r26, r24
 1f8:	b9 1f       	adc	r27, r25
        
        do
        {
            summe1 += *(data++);
 1fa:	81 91       	ld	r24, Z+
 1fc:	28 0f       	add	r18, r24
 1fe:	31 1d       	adc	r19, r1
            summe2 += summe1;
 200:	42 0f       	add	r20, r18
 202:	53 1f       	adc	r21, r19
        }
        
        while (--laenge);
 204:	ea 17       	cp	r30, r26
 206:	fb 07       	cpc	r31, r27
 208:	c1 f7       	brne	.-16     	; 0x1fa <checksumme+0x24>
 20a:	cf 01       	movw	r24, r30
        
        summe1 = (summe1 & 0xFF) + (summe1 >> 8);
 20c:	e3 2f       	mov	r30, r19
 20e:	ff 27       	eor	r31, r31
 210:	df 01       	movw	r26, r30
 212:	a2 0f       	add	r26, r18
 214:	b1 1d       	adc	r27, r1
 216:	9d 01       	movw	r18, r26
        summe2 = (summe2 & 0xFF) + (summe2 >> 8);
 218:	e5 2f       	mov	r30, r21
 21a:	ff 27       	eor	r31, r31
 21c:	df 01       	movw	r26, r30
 21e:	a4 0f       	add	r26, r20
 220:	b1 1d       	adc	r27, r1
 222:	ad 01       	movw	r20, r26
 224:	dc cf       	rjmp	.-72     	; 0x1de <checksumme+0x8>
    }
    
    /* Zur Sicherheit unn√∂tiges abschneiden */
    summe1 = (summe1 & 0xFF) + (summe1 >> 8);
 226:	63 2f       	mov	r22, r19
 228:	77 27       	eor	r23, r23
    summe2 = (summe2 & 0xFF) + (summe2 >> 8);
 22a:	85 2f       	mov	r24, r21
 22c:	99 27       	eor	r25, r25
 22e:	84 0f       	add	r24, r20
 230:	91 1d       	adc	r25, r1
    
    /* Beiden Summen als 16 Bit Wert zur√ºckgeben*/
    return summe2 << 8 | summe1;
 232:	98 2f       	mov	r25, r24
 234:	88 27       	eor	r24, r24
        summe1 = (summe1 & 0xFF) + (summe1 >> 8);
        summe2 = (summe2 & 0xFF) + (summe2 >> 8);
    }
    
    /* Zur Sicherheit unn√∂tiges abschneiden */
    summe1 = (summe1 & 0xFF) + (summe1 >> 8);
 236:	62 0f       	add	r22, r18
 238:	71 1d       	adc	r23, r1
    summe2 = (summe2 & 0xFF) + (summe2 >> 8);
    
    /* Beiden Summen als 16 Bit Wert zur√ºckgeben*/
    return summe2 << 8 | summe1;
}
 23a:	86 2b       	or	r24, r22
 23c:	97 2b       	or	r25, r23
 23e:	08 95       	ret

00000240 <sendeHIGHBit>:
/* Setze Pin auf LOW, warte auf die Mitte der Periode,
 * dann wieder HIGH setzen und auf das Ende der Periode warten.
 *   => HIGH Bit laut Manchester Code (01)
 */
{
    for(int i=0;i<anzahl;i++)
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
        CLEAR_BIT(TX_PORT,TX_PIN);      // Sende PIN auf 0 setzen
        TCNT0 = 0;
        
        while(TCNT0 < (BIT_TIME/2));
        SET_BIT(TX_PORT,TX_PIN);        // Sende PIN auf 1 setzen
        TCNT0 = 1;
 246:	41 e0       	ldi	r20, 0x01	; 1
/* Setze Pin auf LOW, warte auf die Mitte der Periode,
 * dann wieder HIGH setzen und auf das Ende der Periode warten.
 *   => HIGH Bit laut Manchester Code (01)
 */
{
    for(int i=0;i<anzahl;i++)
 248:	28 17       	cp	r18, r24
 24a:	39 07       	cpc	r19, r25
 24c:	6c f4       	brge	.+26     	; 0x268 <sendeHIGHBit+0x28>
    {
        while(TCNT0 < (BIT_TIME/2));    // warten
 24e:	56 b5       	in	r21, 0x26	; 38
 250:	58 3c       	cpi	r21, 0xC8	; 200
 252:	e8 f3       	brcs	.-6      	; 0x24e <sendeHIGHBit+0xe>
        CLEAR_BIT(TX_PORT,TX_PIN);      // Sende PIN auf 0 setzen
 254:	28 98       	cbi	0x05, 0	; 5
        TCNT0 = 0;
 256:	16 bc       	out	0x26, r1	; 38
        
        while(TCNT0 < (BIT_TIME/2));
 258:	56 b5       	in	r21, 0x26	; 38
 25a:	58 3c       	cpi	r21, 0xC8	; 200
 25c:	e8 f3       	brcs	.-6      	; 0x258 <sendeHIGHBit+0x18>
        SET_BIT(TX_PORT,TX_PIN);        // Sende PIN auf 1 setzen
 25e:	28 9a       	sbi	0x05, 0	; 5
        TCNT0 = 1;
 260:	46 bd       	out	0x26, r20	; 38
/* Setze Pin auf LOW, warte auf die Mitte der Periode,
 * dann wieder HIGH setzen und auf das Ende der Periode warten.
 *   => HIGH Bit laut Manchester Code (01)
 */
{
    for(int i=0;i<anzahl;i++)
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	f0 cf       	rjmp	.-32     	; 0x248 <sendeHIGHBit+0x8>
        while(TCNT0 < (BIT_TIME/2));
        SET_BIT(TX_PORT,TX_PIN);        // Sende PIN auf 1 setzen
        TCNT0 = 1;
        
    }
}
 268:	08 95       	ret

0000026a <sendeLOWBit>:
/* Setze auf Pin auf HIGH, warte auf die Mitter der Periode,
 * dann wieder LOW setzen und auf das Ende der Periode warten.
 *   => LOW Bit laut Manchester Code (10)
 */
{
    for(int i=0;i<anzahl;i++)
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
        SET_BIT(TX_PORT,TX_PIN);        // Sende PIN auf 1 setzen
        TCNT0 = 0;
        
        while(TCNT0 < (BIT_TIME/2));
        CLEAR_BIT(TX_PORT,TX_PIN);      // Sende PIN auf 0 setzen
        TCNT0 = 1;
 270:	41 e0       	ldi	r20, 0x01	; 1
/* Setze auf Pin auf HIGH, warte auf die Mitter der Periode,
 * dann wieder LOW setzen und auf das Ende der Periode warten.
 *   => LOW Bit laut Manchester Code (10)
 */
{
    for(int i=0;i<anzahl;i++)
 272:	28 17       	cp	r18, r24
 274:	39 07       	cpc	r19, r25
 276:	6c f4       	brge	.+26     	; 0x292 <sendeLOWBit+0x28>
    {
        while(TCNT0 < (BIT_TIME/2));    // warten
 278:	56 b5       	in	r21, 0x26	; 38
 27a:	58 3c       	cpi	r21, 0xC8	; 200
 27c:	e8 f3       	brcs	.-6      	; 0x278 <sendeLOWBit+0xe>
        SET_BIT(TX_PORT,TX_PIN);        // Sende PIN auf 1 setzen
 27e:	28 9a       	sbi	0x05, 0	; 5
        TCNT0 = 0;
 280:	16 bc       	out	0x26, r1	; 38
        
        while(TCNT0 < (BIT_TIME/2));
 282:	56 b5       	in	r21, 0x26	; 38
 284:	58 3c       	cpi	r21, 0xC8	; 200
 286:	e8 f3       	brcs	.-6      	; 0x282 <sendeLOWBit+0x18>
        CLEAR_BIT(TX_PORT,TX_PIN);      // Sende PIN auf 0 setzen
 288:	28 98       	cbi	0x05, 0	; 5
        TCNT0 = 1;
 28a:	46 bd       	out	0x26, r20	; 38
/* Setze auf Pin auf HIGH, warte auf die Mitter der Periode,
 * dann wieder LOW setzen und auf das Ende der Periode warten.
 *   => LOW Bit laut Manchester Code (10)
 */
{
    for(int i=0;i<anzahl;i++)
 28c:	2f 5f       	subi	r18, 0xFF	; 255
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
 290:	f0 cf       	rjmp	.-32     	; 0x272 <sendeLOWBit+0x8>
        
        while(TCNT0 < (BIT_TIME/2));
        CLEAR_BIT(TX_PORT,TX_PIN);      // Sende PIN auf 0 setzen
        TCNT0 = 1;
    }
 292:	08 95       	ret

00000294 <sendeByte>:
    /* Sende Pin anschlie√üend auf LOW setzen */
    CLEAR_BIT(TX_PORT,TX_PIN);
}

void sendeByte(const uint8_t byte)
{
 294:	8f 92       	push	r8
 296:	9f 92       	push	r9
 298:	af 92       	push	r10
 29a:	bf 92       	push	r11
 29c:	cf 92       	push	r12
 29e:	df 92       	push	r13
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	c7 e0       	ldi	r28, 0x07	; 7
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
    int8_t bit = 7;
    
    for (; bit >= 0; --bit)
    {
        if ( IS_SET(byte,bit) )
 2ac:	c1 2c       	mov	r12, r1
 2ae:	d1 2c       	mov	r13, r1
 2b0:	76 01       	movw	r14, r12
 2b2:	c3 94       	inc	r12
 2b4:	88 2e       	mov	r8, r24
 2b6:	91 2c       	mov	r9, r1
 2b8:	a1 2c       	mov	r10, r1
 2ba:	b1 2c       	mov	r11, r1
 2bc:	b7 01       	movw	r22, r14
 2be:	a6 01       	movw	r20, r12
 2c0:	0c 2e       	mov	r0, r28
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <sendeByte+0x38>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	66 1f       	adc	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	0a 94       	dec	r0
 2ce:	d2 f7       	brpl	.-12     	; 0x2c4 <sendeByte+0x30>
 2d0:	48 21       	and	r20, r8
 2d2:	59 21       	and	r21, r9
 2d4:	6a 21       	and	r22, r10
 2d6:	7b 21       	and	r23, r11
 2d8:	0c 2e       	mov	r0, r28
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <sendeByte+0x50>
 2dc:	76 95       	lsr	r23
 2de:	67 95       	ror	r22
 2e0:	57 95       	ror	r21
 2e2:	47 95       	ror	r20
 2e4:	0a 94       	dec	r0
 2e6:	d2 f7       	brpl	.-12     	; 0x2dc <sendeByte+0x48>
            sendeHIGHBit(1);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
{
    int8_t bit = 7;
    
    for (; bit >= 0; --bit)
    {
        if ( IS_SET(byte,bit) )
 2ea:	45 2b       	or	r20, r21
 2ec:	46 2b       	or	r20, r22
 2ee:	47 2b       	or	r20, r23
 2f0:	19 f0       	breq	.+6      	; 0x2f8 <sendeByte+0x64>
            sendeHIGHBit(1);
 2f2:	0e 94 20 01 	call	0x240	; 0x240 <sendeHIGHBit>
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <sendeByte+0x68>
        
        else
            sendeLOWBit(1);
 2f8:	0e 94 35 01 	call	0x26a	; 0x26a <sendeLOWBit>
 2fc:	21 97       	sbiw	r28, 0x01	; 1
 2fe:	f0 f6       	brcc	.-68     	; 0x2bc <sendeByte+0x28>
        
    }
    
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	df 90       	pop	r13
 30a:	cf 90       	pop	r12
 30c:	bf 90       	pop	r11
 30e:	af 90       	pop	r10
 310:	9f 90       	pop	r9
 312:	8f 90       	pop	r8
 314:	08 95       	ret

00000316 <sendeDaten>:
    /* Beiden Summen als 16 Bit Wert zur√ºckgeben*/
    return summe2 << 8 | summe1;
}

void sendeDaten(const uint8_t* data, uint16_t bytes)
{
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	8c 01       	movw	r16, r24
 326:	eb 01       	movw	r28, r22
    uint8_t i;
    uint16_t chksm;
    
    /* Checksumme der Daten berechnen */
    chksm = checksumme(data,bytes);
 328:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <checksumme>
 32c:	e8 2e       	mov	r14, r24
 32e:	d9 2e       	mov	r13, r25
 330:	bb e4       	ldi	r27, 0x4B	; 75
 332:	fb 2e       	mov	r15, r27
    
    /* Viele 10s senden um am Empf√§nger aufs Signal synchronisieren zu k√∂nnen */
    for(i = 0; i < 75; ++i)
        sendeByte(0);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 4a 01 	call	0x294	; 0x294 <sendeByte>
 33a:	fa 94       	dec	r15
    
    /* Checksumme der Daten berechnen */
    chksm = checksumme(data,bytes);
    
    /* Viele 10s senden um am Empf√§nger aufs Signal synchronisieren zu k√∂nnen */
    for(i = 0; i < 75; ++i)
 33c:	d9 f7       	brne	.-10     	; 0x334 <sendeDaten+0x1e>
        sendeByte(0);
    
    /* Letzte 10s senden und dann zwei 01 Start Impulse */
    sendeByte(3);
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	0e 94 4a 01 	call	0x294	; 0x294 <sendeByte>
    
    /* Daten Byte f√ºr Byte senden */
    for (i = 0; i < bytes; ++i)
 344:	2f 2d       	mov	r18, r15
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	2c 17       	cp	r18, r28
 34a:	3d 07       	cpc	r19, r29
 34c:	40 f4       	brcc	.+16     	; 0x35e <sendeDaten+0x48>
        sendeByte(data[i]);
 34e:	f8 01       	movw	r30, r16
 350:	e2 0f       	add	r30, r18
 352:	f3 1f       	adc	r31, r19
 354:	80 81       	ld	r24, Z
 356:	0e 94 4a 01 	call	0x294	; 0x294 <sendeByte>
    
    /* Letzte 10s senden und dann zwei 01 Start Impulse */
    sendeByte(3);
    
    /* Daten Byte f√ºr Byte senden */
    for (i = 0; i < bytes; ++i)
 35a:	f3 94       	inc	r15
 35c:	f3 cf       	rjmp	.-26     	; 0x344 <sendeDaten+0x2e>
        sendeByte(data[i]);
    
    /* Checksumme anh√§ngen, als erstrs oberes dann unteres byte */
    sendeByte((chksm >> 8));
 35e:	8d 2d       	mov	r24, r13
 360:	0e 94 4a 01 	call	0x294	; 0x294 <sendeByte>
    sendeByte((chksm & 0xFF)); 
 364:	8e 2d       	mov	r24, r14
 366:	0e 94 4a 01 	call	0x294	; 0x294 <sendeByte>
    
    /* Es werden keine Bits mehr gesendet, aber das letzte Bit muss noch fertig werden, sonst, 
       wenn das letzte Bit HIGH ist, w√ºrde es nicht mehr erkannt werden, weil der TX Pin abgedreht 
       wird nachher -> w√ºrde sonst eine 0 werden*/
    
    while(TCNT0 < HALF_TIME);
 36a:	86 b5       	in	r24, 0x26	; 38
 36c:	88 3c       	cpi	r24, 0xC8	; 200
 36e:	e8 f3       	brcs	.-6      	; 0x36a <sendeDaten+0x54>
    
    /* Sende Pin anschlie√üend auf LOW setzen */
    CLEAR_BIT(TX_PORT,TX_PIN);
 370:	28 98       	cbi	0x05, 0	; 5
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	08 95       	ret

00000382 <main>:

#include "tag.h"


int main(void)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	62 97       	sbiw	r28, 0x12	; 18
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
    unsigned char msg [] = "Das ist ein text ";
 396:	82 e1       	ldi	r24, 0x12	; 18
 398:	e8 e0       	ldi	r30, 0x08	; 8
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	de 01       	movw	r26, r28
 39e:	11 96       	adiw	r26, 0x01	; 1
 3a0:	01 90       	ld	r0, Z+
 3a2:	0d 92       	st	X+, r0
 3a4:	8a 95       	dec	r24
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0x1e>
    initTag();
 3a8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <initTag>
    
    unsigned char taste;
    
    
    taste = getTaste();
 3ac:	0e 94 6d 00 	call	0xda	; 0xda <getTaste>
    //if(taste != 0)
       sendeDaten(msg,12);
 3b0:	6c e0       	ldi	r22, 0x0C	; 12
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	ce 01       	movw	r24, r28
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	0e 94 8b 01 	call	0x316	; 0x316 <sendeDaten>
        
    
    
    return 0;
}
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	62 96       	adiw	r28, 0x12	; 18
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
